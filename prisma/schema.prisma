// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]
  reviews       Review[]
  school        School?   @relation("SchoolOwner")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model School {
  id          String    @id @default(cuid())
  name        String
  description String    @db.Text
  address     String
  city        String
  country     String
  latitude    Float?
  longitude   Float?
  phone       String?
  email       String?
  website     String?
  images      String[]
  ownerId     String    @unique
  owner       User      @relation("SchoolOwner", fields: [ownerId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  boards      Board[]
  bookings    Booking[]
  reviews     Review[]
}

model Board {
  id          String    @id @default(cuid())
  name        String
  description String    @db.Text
  type        BoardType
  size        Float
  condition   Condition
  images      String[]
  schoolId    String
  school      School    @relation(fields: [schoolId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bookings    Booking[]
}

model Booking {
  id        String   @id @default(cuid())
  startDate DateTime
  endDate   DateTime
  status    BookingStatus @default(PENDING)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  schoolId  String
  school    School   @relation(fields: [schoolId], references: [id])
  boardId   String?
  board     Board?   @relation(fields: [boardId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String   @db.Text
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  schoolId  String
  school    School   @relation(fields: [schoolId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SurfSpot {
  id          String    @id @default(cuid())
  name        String
  location    String
  difficulty  Difficulty
  type        SpotType
  bestWind    String
  bestTide    String
  description String?   @db.Text
  imageUrl    String?
  latitude    Float?
  longitude   Float?
  amenities   String[]
  hazards     String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum Role {
  USER
  SCHOOL_OWNER
  ADMIN
}

enum BoardType {
  SHORTBOARD
  LONGBOARD
  FISH
  GUN
  FUNBOARD
  HYBRID
}

enum Condition {
  NEW
  EXCELLENT
  GOOD
  FAIR
  POOR
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum SpotType {
  BEACH
  REEF
  POINT
} 